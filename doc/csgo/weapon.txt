VTable for CWeaponCSBase: (0, 0)
 Lin  Win Function
   0    0 CWeaponCSBase::~CWeaponCSBase()
   1    0 CWeaponCSBase::~CWeaponCSBase()
   2    1 CBaseEntity::SetRefEHandle(CBaseHandle  const&)
   3    2 CBaseEntity::GetRefEHandle(void)const
   4    3 CBaseEntity::GetCollideable(void)
   5    4 CBaseEntity::GetNetworkable(void)
   6    5 CBaseEntity::GetBaseEntity(void)
   7    6 CBaseEntity::GetModelIndex(void)const
   8    7 CBaseEntity::GetModelName(void)const
   9    8 CBaseEntity::SetModelIndex(int)
  10    9 CWeaponCSBase::GetServerClass(void)
  11   10 CWeaponCSBase::YouForgotToImplementOrDeclareServerClass(void)
  12   11 CWeaponCSBase::GetDataDescMap(void)
  13   12 CBaseAnimating::GetScriptDesc(void)
  14   13 CBaseEntity::GetAIAddOn(void)const
  15   14 CBaseAnimating::TestCollision(Ray_t  const&, unsigned int, CGameTrace &)
  16   15 CBaseAnimating::TestHitboxes(Ray_t  const&, unsigned int, CGameTrace &)
  17   16 CBaseEntity::ComputeWorldSpaceSurroundingBox(Vector *, Vector *)
  18   17 CBaseEntity::ShouldCollide(int, int)const
  19   18 CBaseEntity::SetOwnerEntity(CBaseEntity*)
  20   19 CBaseEntity::SetScriptOwnerEntity(HSCRIPT__ *)
  21   20 CBaseEntity::ShouldTransmit(CCheckTransmitInfo  const*)
  22   21 CBaseCombatWeapon::UpdateTransmitState(void)
  23   22 CBaseAnimating::SetTransmit(CCheckTransmitInfo *, bool)
  24   23 CWeaponCSBase::GetTracerType(void)
  25   24 CWeaponCSBase::Spawn(void)
  26   25 CWeaponCSBase::Precache(void)
  27   26 CBaseAnimating::SetModel(char  const*)
  28   27 CBaseEntity::InitSharedVars(void)
  29   28 CBaseEntity::PostConstructor(char  const*)
  30   29 CBaseEntity::PostClientActive(void)
  31   30 CBaseEntity::OnParseMapDataFinished(void)
  32   31 CWeaponCSBase::KeyValue(char  const*, char  const*)
  33   34 CBaseEntity::KeyValue(char  const*, float)
  34   33 CBaseEntity::KeyValue(char  const*, int)
  35   32 CBaseEntity::KeyValue(char  const*, Vector  const&)
  36   35 CBaseEntity::GetKeyValue(char  const*, char *, int)
  37   36 CBaseCombatWeapon::Activate(void)
  38   37 CBaseEntity::SetParent(CBaseEntity*, int)
  39   38 CBaseCombatWeapon::ObjectCaps(void)
  40   39 CBaseEntity::AcceptInput(char  const*, CBaseEntity*, CBaseEntity*, variant_t, int)
  41   40 CBaseEntity::GetPlayerName(void)const
  42   41 CBaseEntity::DrawDebugGeometryOverlays(void)
  43   42 CBaseAnimating::DrawDebugTextOverlays(void)
  44   43 CBaseEntity::Save(ISave &)
  45   44 CBaseAnimating::Restore(IRestore &)
  46   45 CBaseEntity::ShouldSavePhysics(void)
  47   46 CBaseEntity::OnSave(IEntitySaveUtils *)
  48   47 CBaseAnimating::OnRestore(void)
  49   48 CBaseEntity::RequiredEdictIndex(void)
  50   49 CBaseEntity::MoveDone(void)
  51   50 CBaseEntity::Think(void)
  52   52 CBaseCombatWeapon::NetworkStateChanged_m_nNextThinkTick(void)
  53   51 CBaseCombatWeapon::NetworkStateChanged_m_nNextThinkTick(void *)
  54   53 CBaseAnimating::GetBaseAnimating(void)
  55   54 CBaseEntity::GetBaseAnimatingOverlay(void)
  56   55 CBaseEntity::GetResponseSystem(void)
  57   56 CBaseEntity::DispatchResponse(char  const*)
  58   57 CBaseEntity::Classify(void)
  59   58 CBaseEntity::DeathNotice(CBaseEntity*)
  60   59 CBaseEntity::ShouldAttractAutoAim(CBaseEntity*)
  61   60 CBaseEntity::GetAutoAimRadius(void)
  62   61 CBaseEntity::GetAutoAimCenter(void)
  63   62 CBaseEntity::GetBeamTraceFilter(void)
  64   63 CBaseEntity::PassesDamageFilter(CTakeDamageInfo  const&)
  65   64 CBaseEntity::TraceAttack(CTakeDamageInfo  const&, Vector  const&, CGameTrace *)
  66   65 CBaseEntity::CanBeHitByMeleeAttack(CBaseEntity*)
  67   66 CBaseEntity::OnTakeDamage(CTakeDamageInfo  const&)
  68   67 CBaseEntity::TakeHealth(float, int)
  69   68 CBaseEntity::IsAlive(void)
  70   69 CBaseEntity::Event_Killed(CTakeDamageInfo  const&)
  71   70 CBaseEntity::Event_KilledOther(CBaseEntity*, CTakeDamageInfo  const&)
  72   71 CBaseEntity::BloodColor(void)
  73   72 CBaseEntity::IsTriggered(CBaseEntity*)
  74   73 CBaseEntity::IsNPC(void)const
  75   74 CBaseEntity::MyNPCPointer(void)
  76   75 CBaseEntity::MyCombatCharacterPointer(void)
  77   76 CBaseEntity::MyNextBotPointer(void)
  78   77 CBaseEntity::GetDelay(void)
  79   78 CBaseEntity::IsMoving(void)
  80   79 CBaseEntity::DamageDecal(int, int)
  81   80 CBaseEntity::DecalTrace(CGameTrace *, char  const*)
  82   81 CBaseEntity::ImpactTrace(CGameTrace *, int, char *)
  83   82 CBaseEntity::OnControls(CBaseEntity*)
  84   83 CBaseEntity::HasTarget(string_t)
  85   84 CBaseEntity::IsPlayer(void)const
  86   85 CBaseEntity::IsNetClient(void)const
  87   86 CBaseEntity::IsTemplate(void)
  88   87 CBaseEntity::IsBaseObject(void)const
  89   88 CBaseEntity::IsBaseTrain(void)const
  90   89 CBaseCombatWeapon::IsBaseCombatWeapon(void)const
  91   90 CBaseCombatWeapon::MyCombatWeaponPointer(void)
  92   91 CBaseEntity::GetServerVehicle(void)
  93   92 CBaseEntity::IsViewable(void)
  94   93 CBaseEntity::ChangeTeam(int)
  95   94 CBaseEntity::OnEntityEvent(EntityEvent_t, void *)
  96   96 CBaseEntity::CanStandOn(CBaseEntity*)const
  97   95 CBaseEntity::CanStandOn(edict_t *)const
  98   98 CBaseEntity::GetEnemy(void)
  99   97 CBaseEntity::GetEnemy(void)const
 100   99 CWeaponCSBase::Use(CBaseEntity *, CBaseEntity *, USE_TYPE, float)
 101  100 CBaseEntity::StartTouch(CBaseEntity*)
 102  101 CBaseEntity::Touch(CBaseEntity*)
 103  102 CBaseEntity::EndTouch(CBaseEntity*)
 104  103 CBaseEntity::StartBlocked(CBaseEntity*)
 105  104 CBaseEntity::Blocked(CBaseEntity*)
 106  105 CBaseEntity::EndBlocked(void)
 107  106 CBaseEntity::PhysicsSimulate(void)
 108  107 CBaseEntity::PhysicsLandedOnGround(float)
 109  108 CBaseEntity::UpdateOnRemove(void)
 110  109 CBaseEntity::StopLoopingSounds(void)
 111  110 CBaseEntity::SUB_AllowedToFade(void)
 112  111 CBaseAnimating::Teleport(Vector  const*, QAngle  const*, Vector  const*, bool)
 113  112 CBaseEntity::NotifySystemEvent(CBaseEntity*, notify_system_event_t, notify_system_event_params_t  const&)
 114  113 CBaseCombatWeapon::MakeTracer(Vector  const&, CGameTrace  const&, int)
 115  114 CBaseEntity::GetTracerAttachment(void)
 116  115 CBaseEntity::FireBullets(FireBulletsInfo_t  const&)
 117  116 CBaseEntity::DoImpactEffect(CGameTrace &, int)
 118  117 CWeaponCSBase::Respawn(void)
 119  118 CBaseEntity::IsLockedByMaster(void)
 120  119 CBaseEntity::GetMaxHealth(void)const
 121  120 CBaseEntity::SetHealth(int)
 122  121 CBaseAnimating::ModifyOrAppendCriteria(ResponseRules::CriteriaSet &)
 123  122 CBaseEntity::ModifyOrAppendDerivedCriteria(ResponseRules::CriteriaSet &)
 124  123 CBaseEntity::GetDamageType(void)const
 125  124 CBaseEntity::GetDamage(void)
 126  125 CBaseEntity::SetDamage(float)
 127  126 CBaseEntity::EyePosition(void)
 128  127 CBaseEntity::EyeAngles(void)
 129  128 CBaseEntity::LocalEyeAngles(void)
 130  129 CBaseEntity::EarPosition(void)
 131  130 CBaseEntity::BodyTarget(Vector  const&, bool)
 132  131 CBaseEntity::HeadTarget(Vector  const&)
 133  132 CBaseEntity::GetVectors(Vector *, Vector *, Vector *)const
 134  133 CBaseEntity::GetViewOffset(void)const
 135  134 CBaseEntity::SetViewOffset(Vector  const&)
 136  135 CBaseEntity::GetSmoothedVelocity(void)
 137  136 CBaseAnimating::GetVelocity(Vector *, Vector *)
 138  137 CBaseEntity::GetFriction(void)const
 139  139 CBaseEntity::FVisible(CBaseEntity*, int, CBaseEntity**)
 140  138 CBaseEntity::FVisible(Vector  const&, int, CBaseEntity**)
 141  140 CBaseEntity::CanBeSeenBy(CAI_BaseNPC *)
 142  141 CBaseEntity::GetAttackDamageScale(CBaseEntity*)
 143  142 CBaseEntity::GetReceivedDamageScale(CBaseEntity*)
 144  143 CBaseEntity::OnGroundChanged(CBaseEntity*, CBaseEntity*)
 145  144 CBaseEntity::GetGroundVelocityToApply(Vector &)
 146  145 CWeaponCSBase::PhysicsSplash(Vector  const&, Vector  const&, float, float)
 147  146 CBaseEntity::Splash(void)
 148  147 CBaseEntity::WorldSpaceCenter(void)const
 149  148 CBaseEntity::GetSoundEmissionOrigin(void)const
 150  149 CBaseEntity::CreateVPhysics(void)
 151  150 CBaseEntity::ForceVPhysicsCollide(CBaseEntity*)
 152  151 CBaseEntity::VPhysicsDestroyObject(void)
 153  152 CBaseEntity::VPhysicsUpdate(IPhysicsObject *)
 154  153 CBaseEntity::VPhysicsTakeDamage(CTakeDamageInfo  const&)
 155  154 CBaseEntity::VPhysicsShadowCollision(int, gamevcollisionevent_t *)
 156  155 CBaseEntity::VPhysicsShadowUpdate(IPhysicsObject *)
 157  156 CBaseEntity::VPhysicsCollision(int, gamevcollisionevent_t *)
 158  157 CBaseEntity::VPhysicsFriction(IPhysicsObject *, float, int, int)
 159  158 CBaseEntity::UpdatePhysicsShadowToCurrentPosition(float)
 160  159 CBaseEntity::VPhysicsGetObjectList(IPhysicsObject **, int)
 161  160 CBaseEntity::VPhysicsIsFlesh(void)
 162  161 CBaseEntity::CanPushEntity(CBaseEntity*)const
 163  162 CBaseEntity::HasPhysicsAttacker(float)
 164  163 CBaseEntity::PhysicsSolidMaskForEntity(void)const
 165  164 CBaseEntity::ResolveFlyCollisionCustom(CGameTrace &, Vector &)
 166  165 CBaseEntity::PerformCustomPhysics(Vector *, Vector *, QAngle *, QAngle *)
 167  166 CBaseAnimating::GetStepOrigin(void)const
 168  167 CBaseAnimating::GetStepAngles(void)const
 169  168 CBaseEntity::ShouldDrawWaterImpacts(void)
 170  170 CBaseEntity::NetworkStateChanged_m_fFlags(void)
 171  169 CBaseEntity::NetworkStateChanged_m_fFlags(void *)
 172  172 CBaseEntity::NetworkStateChanged_m_nWaterLevel(void)
 173  171 CBaseEntity::NetworkStateChanged_m_nWaterLevel(void *)
 174  174 CBaseEntity::NetworkStateChanged_m_hGroundEntity(void)
 175  173 CBaseEntity::NetworkStateChanged_m_hGroundEntity(void *)
 176  176 CBaseEntity::NetworkStateChanged_m_vecBaseVelocity(void)
 177  175 CBaseEntity::NetworkStateChanged_m_vecBaseVelocity(void *)
 178  178 CBaseEntity::NetworkStateChanged_m_flFriction(void)
 179  177 CBaseEntity::NetworkStateChanged_m_flFriction(void *)
 180  180 CBaseEntity::NetworkStateChanged_m_vecVelocity(void)
 181  179 CBaseEntity::NetworkStateChanged_m_vecVelocity(void *)
 182  182 CBaseEntity::NetworkStateChanged_m_iMaxHealth(void)
 183  181 CBaseEntity::NetworkStateChanged_m_iMaxHealth(void *)
 184  184 CBaseEntity::NetworkStateChanged_m_iHealth(void)
 185  183 CBaseEntity::NetworkStateChanged_m_iHealth(void *)
 186  186 CBaseAnimating::NetworkStateChanged_m_bClientSideRagdoll(void)
 187  185 CBaseAnimating::NetworkStateChanged_m_bClientSideRagdoll(void *)
 188  188 CBaseEntity::NetworkStateChanged_m_lifeState(void)
 189  187 CBaseEntity::NetworkStateChanged_m_lifeState(void *)
 190  190 CBaseEntity::NetworkStateChanged_m_takedamage(void)
 191  189 CBaseEntity::NetworkStateChanged_m_takedamage(void *)
 192  192 CBaseEntity::NetworkStateChanged_m_vecViewOffset(void)
 193  191 CBaseEntity::NetworkStateChanged_m_vecViewOffset(void *)
 194  193 CBaseEntity::RunVScripts(void)
 195  194 CBaseAnimating::GetIdealSpeed(void)const
 196  195 CBaseAnimating::GetIdealAccel(void)const
 197  196 CBaseAnimating::StudioFrameAdvance(void)
 198  197 CBaseAnimating::ReachedEndOfSequence(void)
 199  198 CBaseAnimating::OnSequenceSet(int)
 200  199 CBaseAnimating::IsActivityFinished(void)
 201  200 CBaseAnimating::GetSequenceGroundSpeed(CStudioHdr *, int)
 202  201 CBaseAnimating::ClampRagdollForce(Vector  const&, Vector*)
 203  202 CBaseAnimating::BecomeRagdollOnClient(Vector  const&)
 204  203 CBaseAnimating::IsRagdoll(void)
 205  204 CBaseAnimating::CanBecomeRagdoll(void)
 206  205 CBaseAnimating::GetSkeleton(CStudioHdr *, Vector *, QuaternionAligned *, int)
 207  206 CBaseAnimating::GetBoneTransform(int, matrix3x4_t &)
 208  207 CBaseAnimating::SetupBones(matrix3x4a_t *, int)
 209  208 CBaseAnimating::CalculateIKLocks(float)
 210  209 CBaseAnimating::DispatchAnimEvents(CBaseAnimating*)
 211  210 CBaseCombatWeapon::HandleAnimEvent(animevent_t *)
 212  211 CBaseAnimating::HandleScriptedAnimEvent(animevent_t *)
 213  212 CBaseAnimating::HandleBehaviorAnimEvent(animevent_t *)
 214  213 CBaseAnimating::PopulatePoseParameters(void)
 215  214 CBaseAnimating::GetAttachment(int, matrix3x4_t &)
 216  215 CBaseAnimating::InitBoneControllers(void)
 217  216 CBaseAnimating::GetGroundSpeedVelocity(void)
 218  217 CBaseAnimating::InvalidateBoneCache(void)
 219  218 CBaseAnimating::IsViewModel(void)const
 220  219 CBaseAnimating::Ignite(float, bool, float, bool)
 221  220 CBaseAnimating::IgniteLifetime(float)
 222  221 CBaseAnimating::IgniteUseCheapEffect(bool)
 223  222 CBaseAnimating::Extinguish(void)
 224  223 CBaseAnimating::IsFrozen(void)
 225  224 CBaseAnimating::Freeze(float, CBaseEntity *, Ray_t *)
 226  225 CBaseAnimating::Unfreeze(void)
 227  226 CBaseAnimating::Dissolve(char  const*, float, bool, int, Vector, int)
 228  227 CBaseAnimating::SetLightingOriginRelative(CBaseEntity *)
 229  228 CBaseAnimating::SetLightingOrigin(CBaseEntity *)
 230  229 CWeaponCSBase::GetWeaponID(void)const
 231  230 CWeaponCSBase::IsPredicted(void)const
 232  231 CBaseCombatWeapon::GetSubType(void)
 233  232 CBaseCombatWeapon::SetSubType(int)
 234  233 CBaseCombatWeapon::Equip(CBaseCombatCharacter *)
 235  234 CWeaponCSBase::Drop(Vector  const&)
 236  235 CBaseCombatWeapon::UpdateClientData(CBasePlayer *)
 237  236 CBaseCombatWeapon::IsAllowedToSwitch(void)
 238  237 CWeaponCSBase::CanBeSelected(void)
 239  238 CBaseCombatWeapon::VisibleInWeaponSelection(void)
 240  239 CBaseCombatWeapon::HasAmmo(void)
 241  240 CBaseCombatWeapon::SetPickupTouch(void)
 242  241 CWeaponCSBase::DefaultTouch(CBaseEntity *)
 243  242 CBaseCombatWeapon::GiveTo(CBaseEntity *)
 244  243 CBaseCombatWeapon::ShouldDisplayAltFireHUDHint(void)
 245  244 CBaseCombatWeapon::DisplayAltFireHudHint(void)
 246  245 CBaseCombatWeapon::RescindAltFireHudHint(void)
 247  246 CBaseCombatWeapon::ShouldDisplayReloadHUDHint(void)
 248  247 CBaseCombatWeapon::DisplayReloadHudHint(void)
 249  248 CBaseCombatWeapon::RescindReloadHudHint(void)
 250  249 CBaseCombatWeapon::SetViewModelIndex(int)
 251  250 CWeaponCSBase::SendWeaponAnim(int)
 252  251 CBaseCombatWeapon::SendViewModelAnim(int)
 253  252 CBaseCombatWeapon::SetViewModel(void)
 254  253 CBaseCombatWeapon::HasWeaponIdleTimeElapsed(void)
 255  254 CBaseCombatWeapon::SetWeaponIdleTime(float)
 256  255 CBaseCombatWeapon::GetWeaponIdleTime(void)
 257  256 CBaseCombatWeapon::HasAnyAmmo(void)
 258  257 CBaseCombatWeapon::HasPrimaryAmmo(void)
 259  258 CBaseCombatWeapon::HasSecondaryAmmo(void)
 260  259 CBaseCombatWeapon::CanHolster(void)
 261  260 CWeaponCSBase::DefaultDeploy(char *, char *, int, char *)
 262  261 CWeaponCSBase::CanDeploy(void)
 263  262 CWeaponCSBase::Deploy(void)
 264  263 CWeaponCSBase::Holster(CBaseCombatWeapon *)
 265  264 CBaseCombatWeapon::GetLastWeapon(void)
 266  265 CBaseCombatWeapon::SetWeaponVisible(bool)
 267  266 CBaseCombatWeapon::IsWeaponVisible(void)
 268  267 CBaseCombatWeapon::ReloadOrSwitchWeapons(void)
 269  268 CBaseCombatWeapon::HolsterOnDetach(void)
 270  269 CBaseCombatWeapon::IsHolstered(void)
 271  270 CBaseCombatWeapon::ItemPreFrame(void)
 272  271 CWeaponCSBase::ItemPostFrame(void)
 273  272 CWeaponCSBase::ItemBusyFrame(void)
 274  273 CBaseCombatWeapon::ItemHolsterFrame(void)
 275  274 CBaseCombatWeapon::WeaponIdle(void)
 276  275 CBaseCombatWeapon::HandleFireOnEmpty(void)
 277  276 CBaseCombatWeapon::ShouldBlockPrimaryFire(void)
 278  277 CBaseCombatWeapon::IsWeaponZoomed(void)
 279  278 CBaseCombatWeapon::CheckReload(void)
 280  279 CBaseCombatWeapon::FinishReload(void)
 281  280 CBaseCombatWeapon::AbortReload(void)
 282  281 CWeaponCSBase::Reload(void)
 283  282 CBaseCombatWeapon::PrimaryAttack(void)
 284  283 CWeaponCSBase::SecondaryAttack(void)
 285  284 CBaseCombatWeapon::BaseForceFire(CBaseCombatCharacter *, CBaseEntity *)
 286  285 CBaseCombatWeapon::GetPrimaryAttackActivity(void)
 287  286 CBaseCombatWeapon::GetSecondaryAttackActivity(void)
 288  287 CBaseCombatWeapon::GetDrawActivity(void)
 289  288 CWeaponCSBase::GetDefaultAnimSpeed(void)
 290  289 CBaseCombatWeapon::GetBulletType(void)
 291  290 CWeaponCSBase::GetBulletSpread(void)
 292  291 CBaseCombatWeapon::GetBulletSpread(WeaponProficiency_t)
 293  292 CBaseCombatWeapon::GetSpreadBias(WeaponProficiency_t)
 294  293 CBaseCombatWeapon::GetFireRate(void)
 295  294 CBaseCombatWeapon::GetMinBurst(void)
 296  295 CBaseCombatWeapon::GetMaxBurst(void)
 297  296 CBaseCombatWeapon::GetMinRestTime(void)
 298  297 CBaseCombatWeapon::GetMaxRestTime(void)
 299  298 CBaseCombatWeapon::GetRandomBurst(void)
 300  299 CBaseCombatWeapon::WeaponSound(WeaponSound_t, float)
 301  300 CBaseCombatWeapon::StopWeaponSound(WeaponSound_t)
 302  301 CBaseCombatWeapon::GetProficiencyValues(void)
 303  302 CBaseCombatWeapon::GetMaxAutoAimDeflection(void)
 304  303 CBaseCombatWeapon::WeaponAutoAimScale(void)
 305  304 CBaseCombatWeapon::StartSprinting(void)
 306  305 CBaseCombatWeapon::StopSprinting(void)
 307  306 CBaseCombatWeapon::GetDamage(float, int)
 308  307 CBaseCombatWeapon::SetActivity(Activity, float)
 309  308 CBaseCombatWeapon::AddViewKick(void)
 310  309 CBaseCombatWeapon::GetDeathNoticeName(void)
 311  310 CWeaponCSBase::OnPickedUp(CBaseCombatCharacter *)
 312  311 CWeaponCSBase::AddViewmodelBob(CBaseViewModel *, Vector &, QAngle &)
 313  312 CWeaponCSBase::CalcViewmodelBob(void)
 314  313 CBaseCombatWeapon::GetControlPanelInfo(int, char  const*&)
 315  314 CBaseCombatWeapon::GetControlPanelClassName(int, char  const*&)
 316  315 CBaseCombatWeapon::ShouldShowControlPanels(void)
 317  316 CBaseCombatWeapon::CanBePickedUpByNPCs(void)
 318  317 CWeaponCSBase::GetViewModel(int)const
 319  318 CBaseCombatWeapon::GetWorldModel(void)const
 320  319 CBaseCombatWeapon::GetAnimPrefix(void)const
 321  320 CBaseCombatWeapon::GetMaxClip1(void)const
 322  321 CBaseCombatWeapon::GetMaxClip2(void)const
 323  322 CBaseCombatWeapon::GetDefaultClip1(void)const
 324  323 CBaseCombatWeapon::GetDefaultClip2(void)const
 325  324 CBaseCombatWeapon::GetWeight(void)const
 326  325 CBaseCombatWeapon::AllowsAutoSwitchTo(void)const
 327  326 CBaseCombatWeapon::AllowsAutoSwitchFrom(void)const
 328  327 CBaseCombatWeapon::GetWeaponFlags(void)const
 329  328 CBaseCombatWeapon::GetSlot(void)const
 330  329 CBaseCombatWeapon::GetPosition(void)const
 331  330 CBaseCombatWeapon::GetName(void)const
 332  331 CBaseCombatWeapon::GetPrintName(void)const
 333  332 CBaseCombatWeapon::GetShootSound(int)const
 334  333 CBaseCombatWeapon::GetRumbleEffect(void)const
 335  334 CBaseCombatWeapon::UsesClipsForAmmo1(void)const
 336  335 CBaseCombatWeapon::UsesClipsForAmmo2(void)const
 337  336 CBaseCombatWeapon::OnMouseWheel(int)
 338  337 CBaseCombatWeapon::GetEncryptionKey(void)
 339  338 CBaseCombatWeapon::GetPrimaryAmmoType(void)const
 340  339 CBaseCombatWeapon::GetSecondaryAmmoType(void)const
 341  340 CBaseCombatWeapon::GetSpriteActive(void)const
 342  341 CBaseCombatWeapon::GetSpriteInactive(void)const
 343  342 CBaseCombatWeapon::GetSpriteAmmo(void)const
 344  343 CBaseCombatWeapon::GetSpriteAmmo2(void)const
 345  344 CBaseCombatWeapon::GetSpriteCrosshair(void)const
 346  345 CBaseCombatWeapon::GetSpriteAutoaim(void)const
 347  346 CBaseCombatWeapon::GetSpriteZoomedCrosshair(void)const
 348  347 CBaseCombatWeapon::GetSpriteZoomedAutoaim(void)const
 349  348 CBaseCombatWeapon::ActivityOverride(Activity, bool *)
 350  349 CBaseCombatWeapon::ActivityList(void)
 351  350 CBaseCombatWeapon::ActivityListCount(void)
 352  351 CBaseCombatWeapon::FallInit(void)
 353  352 CBaseCombatWeapon::FallThink(void)
 354  353 CWeaponCSBase::Materialize(void)
 355  354 CWeaponCSBase::CheckRespawn(void)
 356  355 CBaseCombatWeapon::Delete(void)
 357  356 CBaseCombatWeapon::Kill(void)
 358  357 CBaseCombatWeapon::CapabilitiesGet(void)
 359  358 CBaseCombatWeapon::WeaponLOSCondition(Vector  const&, Vector  const&, bool)
 360  359 CBaseCombatWeapon::WeaponRangeAttack1Condition(float, float)
 361  360 CBaseCombatWeapon::WeaponRangeAttack2Condition(float, float)
 362  361 CBaseCombatWeapon::WeaponMeleeAttack1Condition(float, float)
 363  362 CBaseCombatWeapon::WeaponMeleeAttack2Condition(float, float)
 364  363 CBaseCombatWeapon::Operator_FrameUpdate(CBaseCombatCharacter *)
 365  364 CBaseCombatWeapon::Operator_HandleAnimEvent(animevent_t *, CBaseCombatCharacter *)
 366  365 CBaseCombatWeapon::Operator_ForceNPCFire(CBaseCombatCharacter *, bool, CBaseEntity *)
 367  366 CBaseCombatWeapon::MakeWeaponNameFromEntity(CBaseEntity *)
 368  367 CBaseCombatWeapon::IsAlwaysActive(void)
 369  368 CBaseCombatWeapon::CanLower(void)
 370  369 CBaseCombatWeapon::Ready(void)
 371  370 CBaseCombatWeapon::Lower(void)
 372  371 CBaseCombatWeapon::HideThink(void)
 373  372 CBaseCombatWeapon::CanReload(void)
 374  373 CWeaponCSBase::BulletWasFired(Vector  const&, Vector  const&)
 375  374 CWeaponCSBase::ShouldRemoveOnRoundRestart(void)
 376  375 CWeaponCSBase::OnRoundRestart(void)
 377  376 CWeaponCSBase::DefaultReload(int, int, int)
 378  377 CWeaponCSBase::IsRemoveable(void)
 379  378 CWeaponCSBase::IsFullAuto(void)const
 380  379 CWeaponCSBase::GetMaxSpeed(void)const
 381  380 CWeaponCSBase::GetCSWpnData(void)const
 382  381 CWeaponCSBase::GetCSZoomLevel(void)
 383  382 CWeaponCSBase::GetCSWeaponID(void)const
 384  383 CWeaponCSBase::IsSilenced(void)const
 385  384 CWeaponCSBase::HasSilencer(void)const
 386  385 CWeaponCSBase::SetWeaponModelIndex(char  const*)
 387  386 CWeaponCSBase::OnJump(float)
 388  387 CWeaponCSBase::OnLand(float)
 389  388 CWeaponCSBase::HasZoom(void)
 390  389 CWeaponCSBase::UpdateShieldState(void)
 391  390 CWeaponCSBase::GetDeployActivity(void)
 392  391 CWeaponCSBase::DefaultPistolReload(void)
 393  392 CWeaponCSBase::WeaponReset(void)
 394  393 CWeaponCSBase::WeaponHasBurst(void)
 395  394 CWeaponCSBase::IsInBurstMode(void)
 396  395 CWeaponCSBase::GetInaccuracy(void)const
 397  396 CWeaponCSBase::GetSpread(void)const
 398  397 CWeaponCSBase::UpdateAccuracyPenalty(void)