VTable for CCSPlayer: (0, 0)
 Lin  Win Function
   0    0 CCSPlayer::~CCSPlayer()
   1    0 CCSPlayer::~CCSPlayer()
   2    1 CBaseEntity::SetRefEHandle(CBaseHandle  const&)
   3    2 CBaseEntity::GetRefEHandle(void)const
   4    3 CBaseEntity::GetCollideable(void)
   5    4 CBaseEntity::GetNetworkable(void)
   6    5 CBaseEntity::GetBaseEntity(void)
   7    6 CBaseEntity::GetModelIndex(void)const
   8    7 CBaseEntity::GetModelName(void)const
   9    8 CBaseEntity::SetModelIndex(int)
  10    9 CCSPlayer::GetServerClass(void)
  11   10 CCSPlayer::YouForgotToImplementOrDeclareServerClass(void)
  12   11 CCSPlayer::GetDataDescMap(void)
  13   12 CBaseMultiplayerPlayer::GetScriptDesc(void)
  14   13 CBaseEntity::GetAIAddOn(void)const
  15   14 CBaseAnimating::TestCollision(Ray_t  const&, unsigned int, CGameTrace &)
  16   15 CBaseAnimating::TestHitboxes(Ray_t  const&, unsigned int, CGameTrace &)
  17   16 CBaseEntity::ComputeWorldSpaceSurroundingBox(Vector *, Vector *)
  18   17 CCSPlayer::ShouldCollide(int, int)const
  19   18 CBaseEntity::SetOwnerEntity(CBaseEntity*)
  20   19 CBaseEntity::SetScriptOwnerEntity(HSCRIPT__ *)
  21   20 CBasePlayer::ShouldTransmit(CCheckTransmitInfo  const*)
  22   21 CBasePlayer::UpdateTransmitState(void)
  23   22 CBaseCombatCharacter::SetTransmit(CCheckTransmitInfo *, bool)
  24   23 CBasePlayer::GetTracerType(void)
  25   24 CCSPlayer::Spawn(void)
  26   25 CCSPlayer::Precache(void)
  27   26 CBasePlayer::SetModel(char  const*)
  28   27 CBaseEntity::InitSharedVars(void)
  29   28 CBaseMultiplayerPlayer::PostConstructor(char  const*)
  30   29 CBaseEntity::PostClientActive(void)
  31   30 CBaseEntity::OnParseMapDataFinished(void)
  32   34 CBaseEntity::KeyValue(char  const*, char  const*)
  33   33 CBaseEntity::KeyValue(char  const*, float)
  34   32 CBaseEntity::KeyValue(char  const*, int)
  35   31 CBaseEntity::KeyValue(char  const*, Vector  const&)
  36   35 CBaseEntity::GetKeyValue(char  const*, char *, int)
  37   36 CBasePlayer::Activate(void)
  38   37 CBaseEntity::SetParent(CBaseEntity*, int)
  39   38 CBasePlayer::ObjectCaps(void)
  40   39 CBaseEntity::AcceptInput(char  const*, CBaseEntity*, CBaseEntity*, variant_t, int)
  41   40 CBasePlayer::GetPlayerName(void)const
  42   41 CBasePlayer::DrawDebugGeometryOverlays(void)
  43   42 CBaseAnimating::DrawDebugTextOverlays(void)
  44   43 CBasePlayer::Save(ISave &)
  45   44 CBasePlayer::Restore(IRestore &)
  46   45 CBasePlayer::ShouldSavePhysics(void)
  47   46 CBaseEntity::OnSave(IEntitySaveUtils *)
  48   47 CBasePlayer::OnRestore(void)
  49   48 CBasePlayer::RequiredEdictIndex(void)
  50   49 CBaseEntity::MoveDone(void)
  51   50 CBaseEntity::Think(void)
  52   52 CBasePlayer::NetworkStateChanged_m_nNextThinkTick(void)
  53   51 CBasePlayer::NetworkStateChanged_m_nNextThinkTick(void *)
  54   53 CBaseAnimating::GetBaseAnimating(void)
  55   54 CBaseAnimatingOverlay::GetBaseAnimatingOverlay(void)
  56   55 CAI_ExpresserHost<CBasePlayer>::GetResponseSystem(void)
  57   56 CAI_ExpresserHost<CBasePlayer>::DispatchResponse(char  const*)
  58   57 CBasePlayer::Classify(void)
  59   58 CBaseEntity::DeathNotice(CBaseEntity*)
  60   59 CBaseEntity::ShouldAttractAutoAim(CBaseEntity*)
  61   60 CBaseEntity::GetAutoAimRadius(void)
  62   61 CBaseEntity::GetAutoAimCenter(void)
  63   62 CBaseEntity::GetBeamTraceFilter(void)
  64   63 CBaseEntity::PassesDamageFilter(CTakeDamageInfo  const&)
  65   64 CCSPlayer::TraceAttack(CTakeDamageInfo  const&, Vector  const&, CGameTrace *)
  66   65 CBaseEntity::CanBeHitByMeleeAttack(CBaseEntity*)
  67   66 CCSPlayer::OnTakeDamage(CTakeDamageInfo  const&)
  68   67 CBasePlayer::TakeHealth(float, int)
  69   68 CBaseEntity::IsAlive(void)
  70   69 CCSPlayer::Event_Killed(CTakeDamageInfo  const&)
  71   70 CCSPlayer::Event_KilledOther(CBaseEntity *, CTakeDamageInfo  const&)
  72   71 CBaseCombatCharacter::BloodColor(void)
  73   72 CBaseEntity::IsTriggered(CBaseEntity*)
  74   73 CBaseEntity::IsNPC(void)const
  75   74 CBaseEntity::MyNPCPointer(void)
  76   75 CBaseCombatCharacter::MyCombatCharacterPointer(void)
  77   76 CBaseEntity::MyNextBotPointer(void)
  78   77 CBaseEntity::GetDelay(void)
  79   78 CBaseEntity::IsMoving(void)
  80   79 CBaseEntity::DamageDecal(int, int)
  81   80 CBaseEntity::DecalTrace(CGameTrace *, char  const*)
  82   81 CCSPlayer::ImpactTrace(CGameTrace *, int, char *)
  83   82 CBaseEntity::OnControls(CBaseEntity*)
  84   83 CBaseEntity::HasTarget(string_t)
  85   84 CBasePlayer::IsPlayer(void)const
  86   85 CBasePlayer::IsNetClient(void)const
  87   86 CBaseEntity::IsTemplate(void)
  88   87 CBaseEntity::IsBaseObject(void)const
  89   88 CBaseEntity::IsBaseTrain(void)const
  90   89 CBaseEntity::IsBaseCombatWeapon(void)const
  91   90 CBaseEntity::MyCombatWeaponPointer(void)
  92   91 CBaseEntity::GetServerVehicle(void)
  93   92 CBaseEntity::IsViewable(void)
  94   93 CCSPlayer::ChangeTeam(int)
  95   94 CBaseEntity::OnEntityEvent(EntityEvent_t, void *)
  96   96 CBaseEntity::CanStandOn(CBaseEntity*)const
  97   95 CBaseEntity::CanStandOn(edict_t *)const
  98   98 CBaseEntity::GetEnemy(void)
  99   97 CBaseEntity::GetEnemy(void)const
 100   99 CBaseEntity::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 101  100 CBaseEntity::StartTouch(CBaseEntity*)
 102  101 CBasePlayer::Touch(CBaseEntity *)
 103  102 CBaseEntity::EndTouch(CBaseEntity*)
 104  103 CBaseEntity::StartBlocked(CBaseEntity*)
 105  104 CBaseEntity::Blocked(CBaseEntity*)
 106  105 CBaseEntity::EndBlocked(void)
 107  106 CBasePlayer::PhysicsSimulate(void)
 108  107 CBaseEntity::PhysicsLandedOnGround(float)
 109  108 CBasePlayer::UpdateOnRemove(void)
 110  109 CBaseEntity::StopLoopingSounds(void)
 111  110 CBaseEntity::SUB_AllowedToFade(void)
 112  111 CBaseFlex::Teleport(Vector  const*, QAngle  const*, Vector  const*, bool)
 113  112 CBaseEntity::NotifySystemEvent(CBaseEntity*, notify_system_event_t, notify_system_event_params_t  const&)
 114  113 CBasePlayer::MakeTracer(Vector  const&, CGameTrace  const&, int)
 115  114 CBaseEntity::GetTracerAttachment(void)
 116  115 CBaseEntity::FireBullets(FireBulletsInfo_t  const&)
 117  116 CBasePlayer::DoImpactEffect(CGameTrace &, int)
 118  117 CBaseEntity::Respawn(void)
 119  118 CBaseEntity::IsLockedByMaster(void)
 120  119 CBaseEntity::GetMaxHealth(void)const
 121  120 CBaseEntity::SetHealth(int)
 122  121 CCSPlayer::ModifyOrAppendCriteria(ResponseRules::CriteriaSet &)
 123  122 CBaseEntity::ModifyOrAppendDerivedCriteria(ResponseRules::CriteriaSet &)
 124  123 CBaseEntity::GetDamageType(void)const
 125  124 CBaseEntity::GetDamage(void)
 126  125 CBaseEntity::SetDamage(float)
 127  126 CBasePlayer::EyePosition(void)
 128  127 CBasePlayer::EyeAngles(void)
 129  128 CBasePlayer::LocalEyeAngles(void)
 130  129 CBaseEntity::EarPosition(void)
 131  130 CBasePlayer::BodyTarget(Vector  const&, bool)
 132  131 CBaseEntity::HeadTarget(Vector  const&)
 133  132 CBaseEntity::GetVectors(Vector *, Vector *, Vector *)const
 134  133 CBaseEntity::GetViewOffset(void)const
 135  134 CBaseEntity::SetViewOffset(Vector  const&)
 136  135 CBasePlayer::GetSmoothedVelocity(void)
 137  136 CBaseAnimating::GetVelocity(Vector *, Vector *)
 138  137 CBaseEntity::GetFriction(void)const
 139  139 CBaseCombatCharacter::FVisible(CBaseEntity *, int, CBaseEntity **)
 140  138 CBaseCombatCharacter::FVisible(Vector  const&, int, CBaseEntity **)
 141  140 CBaseEntity::CanBeSeenBy(CAI_BaseNPC *)
 142  141 CBaseEntity::GetAttackDamageScale(CBaseEntity*)
 143  142 CBaseEntity::GetReceivedDamageScale(CBaseEntity*)
 144  143 CBaseEntity::OnGroundChanged(CBaseEntity*, CBaseEntity*)
 145  144 CBaseEntity::GetGroundVelocityToApply(Vector &)
 146  145 CBaseEntity::PhysicsSplash(Vector  const&, Vector  const&, float, float)
 147  146 CBaseEntity::Splash(void)
 148  147 CBaseEntity::WorldSpaceCenter(void)const
 149  148 CBaseEntity::GetSoundEmissionOrigin(void)const
 150  149 CBaseEntity::CreateVPhysics(void)
 151  150 CBaseEntity::ForceVPhysicsCollide(CBaseEntity*)
 152  151 CBasePlayer::VPhysicsDestroyObject(void)
 153  152 CBasePlayer::VPhysicsUpdate(IPhysicsObject *)
 154  153 CBaseEntity::VPhysicsTakeDamage(CTakeDamageInfo  const&)
 155  154 CBaseCombatCharacter::VPhysicsShadowCollision(int, gamevcollisionevent_t *)
 156  155 CCSPlayer::VPhysicsShadowUpdate(IPhysicsObject *)
 157  156 CBasePlayer::VPhysicsCollision(int, gamevcollisionevent_t *)
 158  157 CBaseEntity::VPhysicsFriction(IPhysicsObject *, float, int, int)
 159  158 CBaseEntity::UpdatePhysicsShadowToCurrentPosition(float)
 160  159 CBaseEntity::VPhysicsGetObjectList(IPhysicsObject **, int)
 161  160 CBaseEntity::VPhysicsIsFlesh(void)
 162  161 CBaseEntity::CanPushEntity(CBaseEntity*)const
 163  162 CBaseEntity::HasPhysicsAttacker(float)
 164  163 CCSPlayer::PhysicsSolidMaskForEntity(void)const
 165  164 CBaseEntity::ResolveFlyCollisionCustom(CGameTrace &, Vector &)
 166  165 CBaseEntity::PerformCustomPhysics(Vector *, Vector *, QAngle *, QAngle *)
 167  166 CBaseAnimating::GetStepOrigin(void)const
 168  167 CBaseAnimating::GetStepAngles(void)const
 169  168 CBaseEntity::ShouldDrawWaterImpacts(void)
 170  170 CBasePlayer::NetworkStateChanged_m_fFlags(void)
 171  169 CBasePlayer::NetworkStateChanged_m_fFlags(void *)
 172  172 CBasePlayer::NetworkStateChanged_m_nWaterLevel(void)
 173  171 CBasePlayer::NetworkStateChanged_m_nWaterLevel(void *)
 174  174 CBasePlayer::NetworkStateChanged_m_hGroundEntity(void)
 175  173 CBasePlayer::NetworkStateChanged_m_hGroundEntity(void *)
 176  176 CBasePlayer::NetworkStateChanged_m_vecBaseVelocity(void)
 177  175 CBasePlayer::NetworkStateChanged_m_vecBaseVelocity(void *)
 178  178 CBasePlayer::NetworkStateChanged_m_flFriction(void)
 179  177 CBasePlayer::NetworkStateChanged_m_flFriction(void *)
 180  180 CBasePlayer::NetworkStateChanged_m_vecVelocity(void)
 181  179 CBasePlayer::NetworkStateChanged_m_vecVelocity(void *)
 182  182 CBaseEntity::NetworkStateChanged_m_iMaxHealth(void)
 183  181 CBaseEntity::NetworkStateChanged_m_iMaxHealth(void *)
 184  184 CBasePlayer::NetworkStateChanged_m_iHealth(void)
 185  183 CBasePlayer::NetworkStateChanged_m_iHealth(void *)
 186  186 CBaseAnimating::NetworkStateChanged_m_bClientSideRagdoll(void)
 187  185 CBaseAnimating::NetworkStateChanged_m_bClientSideRagdoll(void *)
 188  188 CBasePlayer::NetworkStateChanged_m_lifeState(void)
 189  187 CBasePlayer::NetworkStateChanged_m_lifeState(void *)
 190  190 CBaseEntity::NetworkStateChanged_m_takedamage(void)
 191  189 CBaseEntity::NetworkStateChanged_m_takedamage(void *)
 192  192 CBasePlayer::NetworkStateChanged_m_vecViewOffset(void)
 193  191 CBasePlayer::NetworkStateChanged_m_vecViewOffset(void *)
 194  193 CBaseEntity::RunVScripts(void)
 195  194 CBaseAnimating::GetIdealSpeed(void)const
 196  195 CBaseAnimating::GetIdealAccel(void)const
 197  196 CBaseAnimatingOverlay::StudioFrameAdvance(void)
 198  197 CBaseAnimating::ReachedEndOfSequence(void)
 199  198 CBaseAnimating::OnSequenceSet(int)
 200  199 CBaseAnimating::IsActivityFinished(void)
 201  200 CBaseAnimating::GetSequenceGroundSpeed(CStudioHdr *, int)
 202  201 CBaseAnimating::ClampRagdollForce(Vector  const&, Vector*)
 203  202 CBaseAnimating::BecomeRagdollOnClient(Vector  const&)
 204  203 CBaseAnimating::IsRagdoll(void)
 205  204 CBaseAnimating::CanBecomeRagdoll(void)
 206  205 CBaseAnimatingOverlay::GetSkeleton(CStudioHdr *, Vector *, QuaternionAligned *, int)
 207  206 CBaseAnimating::GetBoneTransform(int, matrix3x4_t &)
 208  207 CBaseAnimating::SetupBones(matrix3x4a_t *, int)
 209  208 CBaseAnimating::CalculateIKLocks(float)
 210  209 CBaseAnimatingOverlay::DispatchAnimEvents(CBaseAnimating *)
 211  210 CCSPlayer::HandleAnimEvent(animevent_t *)
 212  211 CBaseAnimating::HandleScriptedAnimEvent(animevent_t *)
 213  212 CBaseAnimating::HandleBehaviorAnimEvent(animevent_t *)
 214  213 CBaseAnimating::PopulatePoseParameters(void)
 215  214 CBaseAnimating::GetAttachment(int, matrix3x4_t &)
 216  215 CBaseAnimating::InitBoneControllers(void)
 217  216 CBaseAnimating::GetGroundSpeedVelocity(void)
 218  217 CBaseAnimating::InvalidateBoneCache(void)
 219  218 CBaseAnimating::IsViewModel(void)const
 220  219 CBaseAnimating::Ignite(float, bool, float, bool)
 221  220 CBaseAnimating::IgniteLifetime(float)
 222  221 CBaseAnimating::IgniteUseCheapEffect(bool)
 223  222 CBaseAnimating::Extinguish(void)
 224  223 CBaseAnimating::IsFrozen(void)
 225  224 CBaseAnimating::Freeze(float, CBaseEntity *, Ray_t *)
 226  225 CBaseAnimating::Unfreeze(void)
 227  226 CBaseAnimating::Dissolve(char  const*, float, bool, int, Vector, int)
 228  227 CBaseCombatCharacter::SetLightingOriginRelative(CBaseEntity *)
 229  228 CBaseAnimating::SetLightingOrigin(CBaseEntity *)
 230  229 CBaseFlex::SetViewtarget(Vector  const&)
 231  230 CBaseFlex::StartSceneEvent(CSceneEventInfo *, CChoreoScene *, CChoreoEvent *, CChoreoActor *, CBaseEntity *)
 232  231 CBaseFlex::ProcessSceneEvents(void)
 233  232 CBaseFlex::ProcessSceneEvent(CSceneEventInfo *, CChoreoScene *, CChoreoEvent *)
 234  233 CBaseFlex::ClearSceneEvent(CSceneEventInfo *, bool, bool)
 235  234 CBaseFlex::CheckSceneEventCompletion(CSceneEventInfo *, float, CChoreoScene *, CChoreoEvent *)
 236  235 CBaseFlex::PlayScene(char  const*, float, ResponseRules::CRR_Response *, IRecipientFilter *)
 237  236 CBaseFlex::ScriptPlayScene(char  const*, float)
 238  237 CBaseFlex::PlayAutoGeneratedSoundScene(char  const*)
 239  238 CBaseFlex::ScriptGetOldestScene(void)
 240  239 CBaseFlex::ScriptGetSceneByIndex(int)
 241  240 CBasePlayer::GetPhysicsImpactDamageTable(void)
 242  242 CBaseCombatCharacter::FInViewCone(CBaseEntity *)
 243  241 CBaseCombatCharacter::FInViewCone(Vector  const&)
 244  244 CBaseCombatCharacter::FInAimCone(CBaseEntity *)
 245  243 CBaseCombatCharacter::FInAimCone(Vector  const&)
 246  245 CBaseCombatCharacter::ShouldShootMissTarget(CBaseCombatCharacter*)
 247  246 CBaseCombatCharacter::FindMissTarget(void)
 248  247 CBaseCombatCharacter::HandleInteraction(int, void *, CBaseCombatCharacter*)
 249  248 CBasePlayer::BodyAngles(void)
 250  249 CBaseCombatCharacter::BodyDirection2D(void)
 251  250 CBaseCombatCharacter::BodyDirection3D(void)
 252  251 CBaseCombatCharacter::HeadDirection2D(void)
 253  252 CBaseCombatCharacter::HeadDirection3D(void)
 254  253 CBaseCombatCharacter::EyeDirection2D(void)
 255  254 CBaseCombatCharacter::EyeDirection3D(void)
 256  257 CBaseCombatCharacter::IsHiddenByFog(Vector  const&)const
 257  256 CBaseCombatCharacter::IsHiddenByFog(CBaseEntity *)const
 258  255 CBaseCombatCharacter::IsHiddenByFog(float)const
 259  260 CBaseCombatCharacter::GetFogObscuredRatio(Vector  const&)const
 260  259 CBaseCombatCharacter::GetFogObscuredRatio(CBaseEntity *)const
 261  258 CBaseCombatCharacter::GetFogObscuredRatio(float)const
 262  261 CBaseCombatCharacter::GetFogParams(fogparams_t *)const
 263  263 CBaseCombatCharacter::IsLookingTowards(CBaseEntity  const*, float)const
 264  262 CBaseCombatCharacter::IsLookingTowards(Vector  const&, float)const
 265  265 CBaseCombatCharacter::IsInFieldOfView(CBaseEntity *)const
 266  264 CBaseCombatCharacter::IsInFieldOfView(Vector  const&)const
 267  267 CBaseCombatCharacter::IsLineOfSightClear(CBaseEntity *, CBaseCombatCharacter::LineOfSightCheckType)const
 268  266 CBaseCombatCharacter::IsLineOfSightClear(Vector  const&, CBaseCombatCharacter::LineOfSightCheckType, CBaseEntity *)const
 269  268 CBaseCombatCharacter::OnFootstep(Vector  const&, bool, bool, bool, bool)
 270  269 CBaseCombatCharacter::GiveAmmo(int, int, bool)
 271  270 CBaseCombatCharacter::NPC_TranslateActivity(Activity)
 272  271 CBaseCombatCharacter::Weapon_TranslateActivity(Activity, bool *)
 273  272 CBaseCombatCharacter::Weapon_FrameUpdate(void)
 274  273 CBaseCombatCharacter::Weapon_HandleAnimEvent(animevent_t *)
 275  274 CBaseCombatCharacter::Weapon_OwnsThisType(char  const*, int)const
 276  275 CCSPlayer::Weapon_CanUse(CBaseCombatWeapon *)
 277  276 CCSPlayer::Weapon_Equip(CBaseCombatWeapon *)
 278  277 CBaseCombatCharacter::Weapon_EquipAmmoOnly(CBaseCombatWeapon *)
 279  278 CBasePlayer::Weapon_Drop(CBaseCombatWeapon *, Vector  const*, Vector  const*)
 280  279 CBasePlayer::Weapon_Switch(CBaseCombatWeapon *, int)
 281  280 CBasePlayer::Weapon_ShootPosition(void)
 282  281 CCSPlayer::Weapon_CanSwitchTo(CBaseCombatWeapon *)
 283  282 CBaseCombatCharacter::Weapon_SlotOccupied(CBaseCombatWeapon *)
 284  283 CBaseCombatCharacter::Weapon_GetSlot(int)const
 285  284 CBaseCombatCharacter::AddPlayerItem(CBaseCombatWeapon *)
 286  285 CBasePlayer::RemovePlayerItem(CBaseCombatWeapon *)
 287  286 CBaseCombatCharacter::CanBecomeServerRagdoll(void)
 288  287 CCSPlayer::OnTakeDamage_Alive(CTakeDamageInfo  const&)
 289  288 CBaseCombatCharacter::OnTakeDamage_Dying(CTakeDamageInfo  const&)
 290  289 CBaseCombatCharacter::OnTakeDamage_Dead(CTakeDamageInfo  const&)
 291  290 CBaseCombatCharacter::GetAliveDuration(void)const
 292  291 CBaseCombatCharacter::OnFriendDamaged(CBaseCombatCharacter*, CBaseEntity *)
 293  292 CBaseCombatCharacter::NotifyFriendsOfDamage(CBaseEntity *)
 294  293 CBaseCombatCharacter::HasEverBeenInjured(int)const
 295  294 CBaseCombatCharacter::GetTimeSinceLastInjury(int)const
 296  295 CBaseCombatCharacter::OnPlayerKilledOther(CBaseEntity *, CTakeDamageInfo  const&)
 297  296 CBaseCombatCharacter::CalcDeathForceVector(CTakeDamageInfo  const&)
 298  297 CBaseCombatCharacter::GetDeathActivity(void)
 299  298 CBaseCombatCharacter::CorpseGib(CTakeDamageInfo  const&)
 300  299 CBaseCombatCharacter::CorpseFade(void)
 301  300 CBaseCombatCharacter::HasHumanGibs(void)
 302  301 CBaseCombatCharacter::HasAlienGibs(void)
 303  302 CBaseCombatCharacter::ShouldGib(CTakeDamageInfo  const&)
 304  303 CBaseCombatCharacter::ShouldDropActiveWeaponWhenKilled(void)
 305  304 CBaseCombatCharacter::OnKilledNPC(CBaseCombatCharacter*)
 306  305 CBaseCombatCharacter::Event_Gibbed(CTakeDamageInfo  const&)
 307  306 CBasePlayer::Event_Dying(void)
 308  307 CBaseCombatCharacter::BecomeRagdoll(CTakeDamageInfo  const&, Vector  const&)
 309  308 CBaseCombatCharacter::FixupBurningServerRagdoll(CBaseEntity *)
 310  309 CBaseCombatCharacter::BecomeRagdollBoogie(CBaseEntity *, Vector  const&, float, int)
 311  311 CBaseCombatCharacter::CheckTraceHullAttack(float, Vector  const&, Vector  const&, float, int, float, bool)
 312  310 CBaseCombatCharacter::CheckTraceHullAttack(Vector  const&, Vector  const&, Vector  const&, Vector  const&, float, int, float, bool)
 313  312 CBaseCombatCharacter::PushawayTouch(CBaseEntity *)
 314  313 CBaseCombatCharacter::IRelationType(CBaseEntity *)
 315  314 CBaseCombatCharacter::IRelationPriority(CBaseEntity *)
 316  315 CBasePlayer::IsInAVehicle(void)const
 317  316 CBasePlayer::GetVehicle(void)
 318  317 CBasePlayer::GetVehicleEntity(void)
 319  318 CBaseCombatCharacter::ExitVehicle(void)
 320  319 CBaseCombatCharacter::RemoveAllWeapons(void)
 321  320 CBaseCombatCharacter::RemoveWeaponOnPlayer(CBaseCombatWeapon *)
 322  321 CBaseCombatCharacter::CalcWeaponProficiency(CBaseCombatWeapon *)
 323  322 CBaseCombatCharacter::GetAttackSpread(CBaseCombatWeapon *, CBaseEntity *)
 324  323 CBaseCombatCharacter::GetSpreadBias(CBaseCombatWeapon *, CBaseEntity *)
 325  324 CBasePlayer::DoMuzzleFlash(void)
 326  325 CBaseCombatCharacter::EquipWearable(CEconWearable *)
 327  326 CBaseCombatCharacter::RemoveWearable(CEconWearable *)
 328  327 CBaseCombatCharacter::AddEntityRelationship(CBaseEntity *, Disposition_t, int)
 329  328 CBaseCombatCharacter::RemoveEntityRelationship(CBaseEntity *)
 330  329 CBaseCombatCharacter::AddClassRelationship(Class_T, Disposition_t, int)
 331  330 CBaseCombatCharacter::AddFactionRelationship(int, Disposition_t, int)
 332  331 CBaseCombatCharacter::ChangeFaction(int)
 333  332 CBaseCombatCharacter::OnChangeActiveWeapon(CBaseCombatWeapon *, CBaseCombatWeapon *)
 334  333 CBasePlayer::GetLastKnownArea(void)const
 335  334 CBaseCombatCharacter::IsAreaTraversable(CNavArea  const*)const
 336  335 CBaseCombatCharacter::ClearLastKnownArea(void)
 337  336 CBaseCombatCharacter::UpdateLastKnownArea(void)
 338  337 CBaseCombatCharacter::OnNavAreaChanged(CNavArea *, CNavArea *)
 339  338 CBaseCombatCharacter::OnNavAreaRemoved(CNavArea *)
 340  339 CBaseCombatCharacter::OnPursuedBy(INextBot *)
 341  341 CBasePlayer::NetworkStateChanged_m_iAmmo(void)
 342  340 CBasePlayer::NetworkStateChanged_m_iAmmo(void *)
 343  342 CCSPlayer::CreateViewModel(int)
 344  343 CCSPlayer::SetupVisibility(CBaseEntity *, unsigned char *, int)
 345  344 CCSPlayer::WantsLagCompensationOnEntity(CBaseEntity  const*, CUserCmd  const*, CBitVec<2048>  const*)const
 346  345 CBasePlayer::SharedSpawn(void)
 347  346 CBasePlayer::ForceRespawn(void)
 348  347 CCSPlayer::PostSpawnPointSelection(void)
 349  348 CCSPlayer::InitialSpawn(void)
 350  349 CBasePlayer::InitHUD(void)
 351  350 CCSPlayer::ShowViewPortPanel(char  const*, bool, KeyValues *)
 352  351 CBasePlayer::GetPlayerModelName(void)
 353  352 CCSPlayer::PlayerDeathThink(void)
 354  353 CCSPlayer::PlayerForceTeamThink(void)
 355  354 CBasePlayer::Jump(void)
 356  355 CBasePlayer::Duck(void)
 357  356 CCSPlayer::PreThink(void)
 358  357 CCSPlayer::PostThink(void)
 359  358 CBasePlayer::DamageEffect(float, int)
 360  359 CCSPlayer::OnSwitchWeapons(CBaseCombatWeapon *)
 361  360 CCSPlayer::OnDamagedByExplosion(CTakeDamageInfo  const&)
 362  361 CCSPlayer::CanKickFromTeam(int)
 363  362 CBasePlayer::ShouldFadeOnDeath(void)
 364  363 CBasePlayer::IsFakeClient(void)const
 365  364 CBasePlayer::GetCharacterDisplayName(void)
 366  365 CBasePlayer::GetPlayerMins(void)const
 367  366 CBasePlayer::GetPlayerMaxs(void)const
 368  367 CBasePlayer::UpdateCollisionBounds(void)
 369  368 CBasePlayer::NoClipStateChanged(void)
 370  369 CBasePlayer::CalcRoll(QAngle  const&, Vector  const&, float, float)
 371  370 CBasePlayer::CalcViewBob(Vector &)
 372  371 CBasePlayer::PackDeadPlayerItems(void)
 373  372 CCSPlayer::RemoveAllItems(bool)
 374  373 CBasePlayer::IsRunning(void)const
 375  374 CBasePlayer::ActivePlayerCombatCharacter(void)
 376  375 CBasePlayer::Weapon_SetLast(CBaseCombatWeapon *)
 377  376 CBasePlayer::Weapon_ShouldSetLast(CBaseCombatWeapon *, CBaseCombatWeapon *)
 378  377 CBasePlayer::Weapon_ShouldSelectItem(CBaseCombatWeapon *)
 379  378 CBasePlayer::HasUnlockableWeapons(int)
 380  379 CBasePlayer::UpdateClientData(void)
 381  380 CBasePlayer::UpdateBattery(void)
 382  381 CBasePlayer::RumbleEffect(unsigned char, unsigned char, unsigned char)
 383  382 CBasePlayer::ExitLadder(void)
 384  383 CBasePlayer::GetLadderSurface(Vector  const&)
 385  384 CBasePlayer::SetFlashlightEnabled(bool)
 386  385 CCSPlayer::FlashlightIsOn(void)
 387  386 CCSPlayer::FlashlightTurnOn(bool)
 388  387 CCSPlayer::FlashlightTurnOff(bool)
 389  388 CBasePlayer::IsIlluminatedByFlashlight(CBaseEntity *, float *)
 390  389 CBasePlayer::UpdatePlayerSound(void)
 391  390 CCSPlayer::UpdateStepSound(surfacedata_t *, Vector  const&, Vector  const&)
 392  391 CCSPlayer::PlayStepSound(Vector &, surfacedata_t *, float, bool)
 393  392 CBasePlayer::GetStepSoundVelocities(float *, float *)
 394  393 CBasePlayer::SetStepSoundTime(stepsoundtimes_t, bool)
 395  394 CCSPlayer::DeathSound(CTakeDamageInfo  const&)
 396  395 CBasePlayer::SetFogController(CFogController *)
 397  396 CBasePlayer::GetSoundscapeListener(void)
 398  397 CCSPlayer::SetAnimation(PLAYER_ANIM)
 399  398 CBasePlayer::OnMainActivityComplete(Activity, Activity)
 400  399 CBasePlayer::OnMainActivityInterrupted(Activity, Activity)
 401  400 CBasePlayer::ImpulseCommands(void)
 402  401 CCSPlayer::CheatImpulseCommands(int)
 403  402 CCSPlayer::ClientCommand(CCommand  const&)
 404  403 CBasePlayer::StartObserverMode(int)
 405  404 CBasePlayer::StopObserverMode(void)
 406  405 CBasePlayer::ModeWantsSpectatorGUI(int)
 407  406 CBasePlayer::SetObserverMode(int)
 408  407 CBasePlayer::GetObserverMode(void)
 409  408 CBasePlayer::SetObserverTarget(CBaseEntity *)
 410  409 CBasePlayer::ObserverUse(bool)
 411  410 CBasePlayer::GetObserverTarget(void)
 412  411 CCSPlayer::FindNextObserverTarget(bool)
 413  412 CCSPlayer::GetNextObserverSearchStartPoint(bool)
 414  413 CBasePlayer::PassesObserverFilter(CBaseEntity  const*)
 415  414 CCSPlayer::IsValidObserverTarget(CBaseEntity *)
 416  415 CBasePlayer::CheckObserverSettings(void)
 417  416 CBasePlayer::JumptoPosition(Vector  const&, QAngle  const&)
 418  417 CBasePlayer::ForceObserverMode(int)
 419  418 CBasePlayer::ResetObserverMode(void)
 420  419 CBasePlayer::ValidateCurrentObserverTarget(void)
 421  420 CCSPlayer::AttemptToExitFreezeCam(void)
 422  421 CCSPlayer::StartReplayMode(float, float, int)
 423  422 CCSPlayer::StopReplayMode(void)
 424  423 CBasePlayer::GetDelayTicks(void)
 425  424 CBasePlayer::GetReplayEntity(void)
 426  425 CBasePlayer::CreateCorpse(void)
 427  426 CCSPlayer::EntSelectSpawnPoint(void)
 428  427 CBasePlayer::GetInVehicle(IServerVehicle *, int)
 429  428 CBasePlayer::LeaveVehicle(Vector  const&, QAngle  const&)
 430  429 CBasePlayer::OnVehicleStart(void)
 431  430 CBasePlayer::OnVehicleEnd(Vector &)
 432  431 CCSPlayer::BumpWeapon(CBaseCombatWeapon *)
 433  432 CBasePlayer::SelectLastItem(void)
 434  433 CBasePlayer::SelectItem(char  const*, int)
 435  434 CBasePlayer::ItemPostFrame(void)
 436  435 CCSPlayer::GiveNamedItem(char  const*, int, bool)
 437  436 CBasePlayer::CheckTrainUpdate(void)
 438  437 CBasePlayer::SetPlayerUnderwater(bool)
 439  438 CBasePlayer::CanBreatheUnderwater(void)const
 440  439 CBasePlayer::CanRecoverCurrentDrowningDamage(void)const
 441  440 CBasePlayer::PlayerUse(void)
 442  441 CCSPlayer::PlayUseDenySound(void)
 443  442 CCSPlayer::FindUseEntity(void)
 444  443 CCSPlayer::IsUseableEntity(CBaseEntity *, unsigned int)
 445  444 CBasePlayer::PickupObject(CBaseEntity *, bool)
 446  445 CBasePlayer::ForceDropOfCarriedPhysObjects(CBaseEntity *)
 447  446 CBasePlayer::GetHeldObjectMass(IPhysicsObject *)
 448  447 CBasePlayer::UpdateGeigerCounter(void)
 449  451 CBasePlayer::GetAutoaimVector(float)
 450  450 CBasePlayer::GetAutoaimVector(float, float)
 451  449 CBasePlayer::GetAutoaimVector(float, float, float, AimResults *)
 452  448 CBasePlayer::GetAutoaimVector(autoaim_params_t &)
 453  452 CBasePlayer::ShouldAutoaim(void)
 454  453 CBasePlayer::ForceClientDllUpdate(void)
 455  454 CBasePlayer::ProcessUsercmds(CUserCmd *, int, int, int, bool)
 456  455 CCSPlayer::PlayerRunCommand(CUserCmd *, IMoveHelper *)
 457  456 CBasePlayer::ChangeTeam(int, bool, bool)
 458  457 CCSPlayer::CanHearAndReadChatFrom(CBasePlayer *)
 459  458 CBaseMultiplayerPlayer::CanSpeak(void)
 460  459 CCSPlayer::ModifyOrAppendPlayerCriteria(ResponseRules::CriteriaSet &)
 461  460 CBasePlayer::GetViewPunchAngle(void)
 462  461 CCSPlayer::GetAimPunchAngle(void)
 463  462 CBasePlayer::CheckChatText(char *, int)
 464  463 CCSPlayer::CreateRagdollEntity(void)
 465  464 CBasePlayer::ShouldAnnounceAchievement(void)
 466  465 CBasePlayer::EnsureSplitScreenTeam(void)
 467  466 CBasePlayer::ForceChangeTeam(int)
 468  467 CBasePlayer::IsFollowingPhysics(void)
 469  468 CCSPlayer::InitVCollision(Vector  const&, Vector  const&)
 470  469 CBasePlayer::UpdatePhysicsShadowToCurrentPosition(void)
 471  470 CBasePlayer::Hints(void)
 472  471 CBasePlayer::IsReadyToPlay(void)
 473  472 CBasePlayer::IsReadyToSpawn(void)
 474  473 CBasePlayer::ShouldGainInstantSpawn(void)
 475  474 CBasePlayer::ResetPerRoundStats(void)
 476  475 CBasePlayer::ResetScores(void)
 477  476 CCSPlayer::IncrementFragCount(int)
 478  477 CCSPlayer::IncrementAssistsCount(int)
 479  478 CCSPlayer::IncrementDeathCount(int)
 480  479 CBasePlayer::EquipSuit(bool)
 481  480 CBasePlayer::RemoveSuit(void)
 482  481 CBasePlayer::GetUseEntity(void)
 483  482 CBasePlayer::GetPotentialUseEntity(void)
 484  483 CCSPlayer::GetPlayerMaxSpeed(void)
 485  485 CCSPlayer::CommitSuicide(bool, bool)
 486  484 CCSPlayer::CommitSuicide(Vector  const&, bool, bool)
 487  486 CBasePlayer::IsBot(void)const
 488  487 CBaseMultiplayerPlayer::GetExpresser(void)
 489  488 CBasePlayer::CalcPlayerView(Vector &, QAngle &, float &)
 490  489 CCSPlayer::SpawnArmorValue(void)const
 491  490 CBasePlayer::UpdateTonemapController(void)
 492  492 CCSPlayer::NetworkStateChanged_m_ArmorValue(void)
 493  491 CCSPlayer::NetworkStateChanged_m_ArmorValue(void *)
 494  493 CBasePlayer::FindEntityClassForward(char *)
 495  494 CBasePlayer::FindEntityForward(bool)
 496  495 CBasePlayer::FindPickerEntityClass(char *)
 497  496 CBasePlayer::FindPickerEntity(void)
 498  497 CBasePlayer::FindPickerAINode(int)
 499  498 CBasePlayer::FindPickerAILink(void)
 500  499 CBasePlayer::OnSpeak(CBasePlayer*, char  const*, float)
 501  500 CBasePlayer::OnVoiceTransmit(void)
 502  501 CBasePlayer::PlayerSolidMask(bool)const
 503  502 CAI_ExpresserHost<CBasePlayer>::NoteSpeaking(float, float)
 504  504 CAI_ExpresserHost<CBasePlayer>::Speak(CAI_Concept, char  const*, char *, unsigned int, IRecipientFilter *)
 505  503 CAI_ExpresserHost<CBasePlayer>::Speak(CAI_Concept, ResponseRules::CriteriaSet *, char *, unsigned int, IRecipientFilter *)
 506  505 CAI_ExpresserHost<CBasePlayer>::PostSpeakDispatchResponse(CAI_Concept, ResponseRules::CRR_Response *)
 507  506 CBaseMultiplayerPlayer::SpeakIfAllowed(CAI_Concept, SpeechPriorityType, char  const*, char *, unsigned int, IRecipientFilter *)
 508  507 CBaseMultiplayerPlayer::SpeakConceptIfAllowed(int, char  const*, char *, unsigned int, IRecipientFilter *)
 509  508 CBaseMultiplayerPlayer::CanSpeakVoiceCommand(void)
 510  509 CBaseMultiplayerPlayer::ShouldShowVoiceSubtitleToEnemy(void)
 511  510 CBaseMultiplayerPlayer::NoteSpokeVoiceCommand(char  const*)
 512  511 CBaseMultiplayerPlayer::OnAchievementEarned(int)
 513  512 CBaseMultiplayerPlayer::GetMultiplayerExpresser(void)
 514  513 CBaseMultiplayerPlayer::CalculateTeamBalanceScore(void)
 515  514 CCSPlayer::AwardAchievement(int, int)
 516  515 CBaseMultiplayerPlayer::CreateExpresser(void)
 517  516 CCSPlayer::IsBeingGivenItem(void)const
 518      CCSPlayer::CSAnim_GetActiveWeapon(void)
 519      CCSPlayer::CSAnim_CanMove(void)
 520  517 CCSPlayer::Blind(float, float, float)
 521  518 CCSPlayer::ResetForceTeamThink(void)